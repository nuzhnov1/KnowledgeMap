package com.nuzhnov.knowledgemap.data.local

import com.nuzhnov.graph.Knowledge


@JvmField
internal val rootNode = Knowledge(
    name = "Путь Android-самурая",
    description = "Здесь должны быть наставления начинающим, но их пока нет ¯\\_(ツ)_/¯",
    knowledgeSources = listOf()
)

@JvmField
internal val chooseLanguageNode = Knowledge(
    name = "Выбери язык",
    description =
            "В Android-е используются два языка программирования: Kotlin и Java. " +
            "Лучше всего начать изучение языка Kotlin, поскольку теперь на нём пишутся все " +
            "основные библиотеки, а некоторые из них, такие как Jetpack Compose поддерживают только " +
            "Kotlin. Кроме того, Kotlin поддерживает многие крутые фичи, как корутины и " +
            "sealed-классы. Однако изучить Java всё-таки придётся, поскольку большая кодовая база " +
            "под Android написана на данном языке. По мере изучения этих языков выбери себе " +
            "один-два простых проекта, например, консольные приложения, и реализуй их на выбранном " +
            "языке. Практика закрепит твои знания!",
    knowledgeSources = listOf()
)

@JvmField
internal val kotlinNode = Knowledge(
    name = "Kotlin",
    description =
            "Kotlin - статически типизированный, объектно-ориентированный язык программирования, " +
            "работающий поверх Java Virtual Machine и разрабатываемый компанией JetBrains. " +
            "Язык полностью совместим с Java, что позволяет использовать код написанный на Kotlin в " +
            "Java, и, наоборот, код написанный на Java - в Koltin. Kotlin имеет множество " +
            "сопутствующих ему технологий, таких как, Kotlin Native и Kotlin Multiplatform, которые " +
            "в уже позволяют писать кроссплатформенные приложения с единой кодовой базой на Kotlin. " +
            "Большинство новых Android-библиотек, в особенности официальных, имеют поддержку прежде " +
            "всего данного языка. По сравнению с Java, Kotlin обладает более лаконичным и приятным " +
            "синтаксисом, позволяя быстрее писать код. Одной из главных фич Kotlin является " +
            "null-safety, которая позволяет разработчикам избавиться от одной из самых " +
            "распространённых ошибок - исключения нулевого указателя (NullPointerException или NPE).\n\n" +
            "Изучение Kotlin начни прежде всего с изучения официальной документации, для которой " +
            "также есть перевод. Кроме того, посети сайт с официальной документацией по Android, там " +
            "также есть много полезной информации о данном языке, включая практические задания. " +
            "Если ты новичок в программировании и никогда не сталкивался с ним, то пройди бесплатный " +
            "курс Kotlin Basics от Jetbrains Academy.",
    knowledgeSources = listOf(
        "Официальная документация: https://kotlinlang.org/docs",
        "Официальная документация на русском: https://kotlinlang.ru/",
        "Применение Kotlin в Android, кодлабы и практика по нему: https://developer.android.com/kotlin",
        "Бесплатный курс Kotlin Basics: https://hyperskill.org/tracks/18"
    )
)

@JvmField
internal val javaNode = Knowledge(
    name = "Java",
    description =
            "Java - строго типизированный объектно-ориентированный язык программирования общего " +
            "назначения. Java - кроссплатформенный язык программирования в том понимании, что одни " +
            "и те же программы, написанные на Java, будут одинаково работать на всех платформах, " +
            "имеющих поддержку Java Virtual Machine (JVM). Такая кроссплатформенность также " +
            "характерна и для всех языков платформы JVM, включая Kotlin. Поддерживается Java в том " +
            "числе и на платформе Android. Собственно, Java - это изначальный язык прикладного " +
            "программирования под Android. \n\n" +
            "Если ты решил всё-таки изучать сначала язык Java, то обрати внимание на курс JavaRush. " +
            "Для более глубокого погружения в Java, в том числе в философию этого языка, обязательно " +
            "прочти книгу \"Философия Java\" Брюса Эккеля, которую многие Java-разработчики считают " +
            "своей библией.",
    knowledgeSources = listOf(
        "Курс JavaRush: https://javarush.com/",
        "Официальная документация по Java: https://docs.oracle.com/en/java/",
        "Брюс Эккель \"Философия Java\""
    )
)

@JvmField
internal val fundamentalsNode = Knowledge(
    name = "Первые основы",
    description =
            "На первых порах вовремя или сразу после изучения Kotlin или Java установи Android Studio " +
            "- твою будущую среду разработки Android-приложений. Разберись с тем, как она работает, " +
            "в этом тебе поможет документация по ней, а также подсказки и справка в самой " +
            "Android Studio.\n\n" +
            "По мере изучения Kotlin или Java изучай основы объектно-ориентированного " +
            "программирования (ООП), его основные принципы и концепции.\n\n" +
            "Также не забывай про алгоритмы и структуры данных, они обязательно понадобятся тебе " +
            "в будущем (по крайней мере на собеседованиях ¯\\_(ツ)_/¯).\n\n" +
            "Узнай, что такое Gradle, для чего он нужен, и как он работает. Спойлер: он обязательно " +
            "тебе понадобится для сборки твоих проектов под Android.",
    knowledgeSources = listOf(
        "Официальная документация по Android Studio: https://developer.android.com/studio",
        "Официальная документация по Gradle: https://docs.gradle.org/current/userguide/userguide.html"
    )
)

@JvmField
internal val vcsNode = Knowledge(
    name = "Системы контроля версий",
    description =
        "Системы контроля версий является весьма удобный и порой незаменимым инструментом " +
        "разработчика. Они позволяют вам сохранять изменения в вашем проекте и, по необходимости" +
        "делать откаты на прежние версии проекта. Кроме того, они позволяют разделять разработку " +
        "проекта с помощью ветвей. Например, при внедрении новых фич в проект, их, как правило, " +
        "внедряют в тестовую ветвь или dev-ветвь, и только после появления стабильной версии фичи, " +
        "её внедряют в основную ветвь проекта.\n" +
        "Немаловажным в системах контроля версий являются хостинги репозиториев, т.н. места, где " +
        "располагаются проекты. Одним из наиболее популярных хостингов на данный момент является " +
        "Github. Именно там разработчики чаще всего размещают личные проекты, поэтому обязательно " +
        "ознакомся с ним, а также зарегистрируйся там для дальнейшего пополнения своего портфолио!\n\n" +
        "Для начала ознакомся с наиболее популярными система контроля версий: Git и Mercurial, " +
        "на первых этапах узнай общую концепцию их работы. Оба этих инструмента встроены в " +
        "большинство сред разработки, в том числе и в Android Studio, поэтому не стоит учить все " +
        "их команды.\n\n" +
        "Затем переходи к освоению Github или BitBucket. Оба этих сервиса являются хостингами " +
        "репозиториев. Предпочтение лучше всего отдать Github, поскольку он идеально подходит для " +
        "размещения небольших проектов и не требует платной подписки.",
    knowledgeSources = listOf(
        "Git - одна из наиболее популярных систем контроля версий: https://git-scm.com/",
        "Mercurial: https://www.mercurial-scm.org/",
        "Сайт Github: https://github.com/",
        "BitBucket: https://bitbucket.org/"
    )
)

@JvmField
internal val applicationNode = Knowledge(
    name = "Написание Android-приложения",
    description =
        "Для написания Android-приложения тебе потребуется знать то, как работают " +
        "компоненты Android Framework, а также его расширения - Android Jetpack, которые значительно " +
        "упростят тебе разработку приложений.\n" +
        "Кроме того, весьма важным аспектом в Android-разработке является архитектура приложений " +
        "под данную платформу. Понимание архитектуры не только сделает твой проект понятным для " +
        "других, но и убережёт тебя от многих ошибок, встречаемых в этой разработке, а также " +
        "сделает твой код чище.\n" +
        "Большой темой в Android является написание UI. На данным момент существует два подхода " +
        "написании пользовательской интерфейса (UI): Android Views и Jetpack Compose.\n" +
        "Кроме компонентов системы Android, тебе необходимо будет знать, как работать с некоторыми " +
        "сторонними библиотеками, такими как Retrofit 2, Moshi, GSON и c другими.\n\n" +
        "Android, а также сопутствующие ему библиотеки, лучше всего изучать по официальным " +
        "документациям, поскольку в них наиболее полно отражены все аспекты, касающиеся данных " +
        "фреймворков и библиотек. Практические задания можно брать там же: так официальная " +
        "документация по Android предлагает набор кодлаб, решая которые ты можешь закрепить на " +
        "практике полученные знания.\n\n" +
        "Однако, если у тебя есть проблемы с английским языком и чтение документации для тебя " +
        "затруднительно, то можешь посетить сайт Александра Климова, который рассматривает и " +
        "объясняет работу многих компонентов Android-а, а также сторонних библиотек вроде Retrofit. " +
        "Также в этом случае обрати внимание на сайт Start Android, который по мимо теории предлагает " +
        "и практические занятия в рамках курсов.\n\n" +
        "Если ты предпочитаешь смотреть обучающие видео, то обрати внимание на Youtube-канал " +
        "Philipp Lackner, в котором ты сможешь найти объяснение многих тем, связанных с Android-ом " +
        "и не только. На нём ты также сможешь найти и практические видео, в которых создаётся какой-либо " +
        "приложение с нуля с подробным объяснением многих аспектов, касающихся разработки.\n\n" +
        "Среди русскоязычным Youtube-каналов, посвященных Android-разработке можно выделить: " +
        "Android Broadcast и Mobile Developer, последний из который посвящен скорее, в целом, " +
        "мобильной разработке.",
    knowledgeSources = listOf(
        "Официальная по Android: https://developer.android.com/docs",
        "Архитектура современного Android-приложения: https://developer.android.com/topic/architecture",
        "Набор библиотек Android Jetpack: https://developer.android.com/jetpack",
        "Документация по Android Views: https://developer.android.com/develop/ui",
        "Документация по Jetpack Compose: https://developer.android.com/jetpack/compose",
        "Сайт Александра Климова: https://developer.alexanderklimov.ru/android/",
        "Start Android: https://startandroid.ru/ru/",
        "Youtube-канал Philipp Lackner: https://www.youtube.com/@PhilippLackner",
        "Youtube-канал Android Broadcast: https://www.youtube.com/c/androidbroadcast",
        "Youtube-канал Mobile Developer: https://www.youtube.com/c/mobiledeveloper"
    )
)

@JvmField
internal val architectureNode = Knowledge(
    name = "Архитектуры",
    description =
        "Тема архитектуры Android-приложения - одна из важнейших тем Android-разработки, " +
        "поскольку написание приложения без какой-либо архитектуры, с плохо продуманной " +
        "архитектурой или же с использованием устаревших видов архитектур влечёт за собой " +
        "плохую расширяемость данного приложения, трудности в его тестировании и отладке, " +
        "а также плохую читаемость кода данного приложения и трудное восприятие логики его работы.\n" +
        "Архитектура Android-приложения основана на идеях чистой архитектуры, предложенной Робертом " +
        "Мартиным в 2012 году, поэтому для лучшего понимания архитектуры Android-приложения изучи " +
        "основные идеи чистой архитектуры. Сама же архитектура Android-приложения состоит из 3-х " +
        "слоев (в простом случае 2-х): слоя UI, слоя домена (в простых приложения может " +
        "отсутствовать) и слоя данных. При этом слой UI может реализовываться по различным паттернам, " +
        "наиболее популярным из которых является MVVM (Model-View-ViewModel).\n\n" +
        "С темой архитектуры Android-приложения связано множество тем. Наиболее важные среди них - " +
        "внедрение зависимостей (Dependency Injection или DI) и компоненты архитектуры (ViewModel, " +
        "LiveData, StateFlow и многие другие).",
    knowledgeSources = listOf(
        "Архитектура современного Android-приложения: https://developer.android.com/topic/architecture",
        "Перевод официальной документации по архитектуре: https://habr.com/ru/post/456256/",
        "Объяснение принципов чистой архитектуры: https://habr.com/ru/post/269589/",
        "Внедрение зависимостей: https://ru.wikipedia.org/wiki/Внедрение_зависимости"
    )
)

@JvmField
internal val diNode = Knowledge(
    name = "Dependency Injection",
    description =
        "Внедрение зависимостей (Dependency Injection или DI) - процесс предоставления внешней " +
        "зависимости программному компоненту. Под внедрением, как правило, понимается предоставление " +
        "зависимостей либо через параметры конструктора класса, либо же через геттеры/сеттеры " +
        "компонентов класса.\n" +
        "Внедрение зависимостей значительно упрощает построение сложных программных компонентов, " +
        "когда они состоят из множества других компонентов, которые в свою очередь также могут " +
        "состоять из множества других объектов. Задачи построения таких объектов и решают библиотеки " +
        "внедрения зависимостей или же сами фреймворки.\n" +
        "Внедрение зависимостей особенно актуально для Android, поскольку многие компоненты, такие " +
        "как, Activity, Fragment и ViewModel конструируются самой операционной системой или же " +
        "Android Framework-ом, однако пользователю часто необходимо передать те или иные объекты в " +
        "данные компоненты. Первый подход подразумевает написание собственных фабрик для данных классов " +
        ", однако этот подход весьма утомителен и подвержен ошибкам. Альтернативный подход - библиотеки " +
        "внедрения зависимостей, которые строят эти фабрики за разработчика.\n\n" +
        "В Android используются множество библиотек внедрения зависимостей, среди которых наиболее " +
        "популярными являются Dagger 2, её подбиблиотека Hilt, а также Koin (в случае использования Kotlin).\n" +
        "Рекомендуемым способом внедрения зависимостей в Android является библиотека Hilt, она не " +
        "только обеспечивает статическое внедрение зависимостей (на этапе компиляции), как Dagger 2, " +
        "но и располагает множеством фич, ориентированных на Android. Hilt позволяет избавится от " +
        "написания шаблонного кода, который приходится писать при использовании Dagger 2: в Hilt " +
        "нет необходимости писать компоненты DI для стандартных классов Android вроде Application, " +
        "Activity или Fragment, достаточно лишь пометить их аннотациями Hilt.",
    knowledgeSources = listOf(
        "Руководство по внедрению зависимостей в Android: https://developer.android.com/training/dependency-injection",
        "Использование Hilt в Android: https://developer.android.com/training/dependency-injection/hilt-android",
        "Использование Dagger 2 в Android: https://developer.android.com/training/dependency-injection/dagger-basics",
        "Официальная документация по Hilt: https://dagger.dev/hilt/",
        "Официальная документация по Dagger 2: https://dagger.dev/dev-guide/"
    )
)

@JvmField
internal val architectureComponentsNode = Knowledge(
    name = "Архитектурные компоненты",
    description =
        "В Android Jetpack существует набор библиотек, ориентированных на построение приложений " +
        "с рекомендуемой архитектурой. Что более важно - эти компоненты значительно упрощают решение " +
        "множества задач, встречаемых при разработке приложений, например, наблюдение за изменениями " +
        "данных с использованием LiveData или StateFlow и реакция на эти изменения.\n" +
        "Для привязки данных к представления используется расширение Android Jetpack - ViewBinding. " +
        "Данное расширение генерирует специальные классы, предоставляющие доступ к компонентам представления" +
        "(Views). Благодаря этому расширению достигается типо-безопасность при работе с представлениями, " +
        "что уменьшает число возможных ошибок. Расширение DataBinding предоставляет обратную привязку - " +
        "привязку представлений к данным. В этом случае представления будут автоматически изменятся " +
        "при изменении данных, при этом DataBinding предоставляет и двустороннюю привязку.\n" +
        "В Android Jetpack есть набор классов, которые позволяют отслеживать жизненный цикл компонентов " +
        "Android, в частности, Activity и Fragment. К таким классам относятся LiveData и ViewModel.\n" +
        "Для работы с простыми внешними данными (файлами) применяется библиотека DataStore.\n" +
        "Для выполнения длительных, важных или отложенных работ, например, рассылка уведомлений, " +
        "применяется класс WorkManager, который управляет подобной работой и позволяет её выполнять " +
        "даже в тех случаях, когда приложение закрыто.\n" +
        "Для работы с БД в Android рекомендуется использоваться библиотеку Room. Которая автоматизирует " +
        "взаимодействие с локальной базой данных SQLite, путём построения объектно-реляционной модели. " +
        "Единственное, что необходимо сделать пользователю - это объевить сущности базы данных в виде " +
        "классов данных, пометив их аннотациями Room, объявить интерфейсы DAO (Data Access Object), пометив " +
        "методы этих интерфейсов SQL-запросами в виде аннотаций, и, наконец, объявить класс базы данных."
    ,
    knowledgeSources = listOf(
        "О ViewBinding: https://developer.android.com/topic/libraries/view-binding",
        "О DataBinding: https://developer.android.com/topic/libraries/data-binding",
        "О ViewModel: https://developer.android.com/topic/libraries/architecture/viewmodel",
        "О LiveData: https://developer.android.com/topic/libraries/architecture/livedata",
        "О DataStore: https://developer.android.com/topic/libraries/architecture/datastore",
        "О WorkManager: https://developer.android.com/topic/libraries/architecture/workmanager"
    )
)

@JvmField
internal val coreComponentsNode = Knowledge(
    name = "Компоненты Android Framework",
    description =
        "В Android существует множество основных компонентов. Наиболее главными из них являются: " +
        "активности (Activity), фрагменты (Fragment), сервисы (Service),широковещательные приёмники " +
        "(Broadcast Receiver) и Content Providers. Кроме них, существует класс приложения - " +
        "Application, он является единственным для всего приложения и, по сути, хранит в себе все " +
        "остальные компоненты.\n" +
        "Активности предназначены для построение взаимодействия с пользователем, иными словами они " +
        "отвечают за построения UI и реагируют на действия пользователя.\n" +
        "Фрагменты не являются самостоятельными компонентами, как активности, однако они встраиваются " +
        "в активности, что в совокупности с библиотеками навигации позволяет реализовать принцип " +
        "одиночного активити (Single Activity), когда приложение имеет как можно меньше активностей, " +
        "в идеале и вовсе одну, вместо активностей же используются фрагменты.\n" +
        "Сервисы обычно выполняют какую-либо фоновую работу, например, синхронизирует данные приложения " +
        "с удалённым сервисом или загружают файлы.\n" +
        "Широковещательные приёмники предназначены для перехвата системных сообщений, например, о " +
        "разрядке батареи, кроме того такие классы умеют принимать сообщения предназначенные именно для " +
        "данного приложения.\n" +
        "Content Providers - это классы предназначенные для предоставления каких-либо данных устройства и " +
        "пользователя, например, список его контактов.\n",
    knowledgeSources = listOf(
        "Об Activity: https://developer.android.com/guide/components/activities/intro-activities",
        "О Fragment: https://developer.android.com/guide/fragments",
        "О Service: https://developer.android.com/guide/components/services",
        "О Broadcast Receiver: https://developer.android.com/guide/components/broadcasts",
        "О Content Providers: https://developer.android.com/guide/topics/providers/content-provider-basics"
    )
)

@JvmField
internal val navigationNode = Knowledge(
    name = "Навигация в приложении",
    description =
        "Важной темой в Android разработке является тема навигации по приложению.\n" +
        "Навигация представляет собой перемещение пользователя между экранами приложения при его " +
        "взаимодействии с ним.\n" +
        "В Android существует множество библиотек, реализующих навигацию. Основной библиотекой для " +
        "навигации является официальная библиотека Navigation Component, которая входит в набор " +
        "библиотек Android Jetpack. Данная библиотека наиболее популярна среди остальных подобных ей. " +
        "Среди сторонних библиотек можно выделить библиотеки Cicerone и Voager.",
    knowledgeSources = listOf(
        "Navigation Component: https://developer.android.com/guide/navigation",
        "Cicerone: https://github.com/terrakok/Cicerone",
        "Voager: https://voyager.adriel.cafe/"
    )
)

@JvmField
internal val manifestNode = Knowledge(
    name = "Файл манифеста",
    description =
        "Файл манифеста - это основной файл, где разработчик определяет основные компоненты, " +
        "которые он реализовал. Это необходимо для самой операционной системы Android. Кроме того, " +
        "в нём пользователь объявляет о разрешениях, которые приложение будет запрашивать у пользователя, " +
        "а также объявляет фильтры намерений (Intent Filters), благодаря которым данное приложение " +
        "может взаимодействовать с другими.",
    knowledgeSources = listOf(
        "О файле манифеста: https://developer.android.com/guide/topics/manifest/manifest-intro"
    )
)

@JvmField
internal val uiNode = Knowledge(
    name = "Пользовательский интерфейс",
    description =
        "Пользовательский интерфейс (User Interface или UI) реализуется в Android двумя способами: " +
        "Android Views и Jetpack Compose. Android Views является исторически первым способом написания " +
        "UI. С их использованием написана большая кодовая база, поэтому их знание весьма рекомендовано. " +
        "Однако для написания новых проектов лучше всего использовать уже Jetpack Compose, поскольку " +
        "данная библиотека предоставляет декларативный способ написания UI, и этот способ намного проще " +
        "чем использование Android Views, не говоря о том, что использование Jetpack Compose значительно " +
        "сокращает объем кода и времени, необходимого для его написания.",
    knowledgeSources = listOf(
        "Документация по Android Views: https://developer.android.com/develop/ui",
        "Документация по Jetpack Compose: https://developer.android.com/jetpack/compose",
    )
)

@JvmField
internal val thirdPartyLibrariesNode = Knowledge(
    name = "Вспомогательные библиотеки",
    description =
        "К данному классу библиотек относятся все библиотеки, которые не входят в состав Android " +
        "Framework или Android Jetpack, а также, в целом, не зависят от платформы Android. " +
        "Как правило, это библиотеки на платформе Java Virtual Machine (JVM), они также целиком и " +
        "полностью поддерживаются на Android. Рассмотрим основные из них.\n\n" +
        "Библиотека Retrofit 2 позволяет разработчику выстраивать взаимодействие с удалённым REST-API " +
        "сервисом, путём описания такого взаимодействия декларативно - с помощью интерфейсов и аннотаций.\n" +
        "Библиотека OkHTTP позволяет выстраивать HTTP-клиенты и HTTP-сервисы. В Android, как правило, " +
        "используется клиентская часть библиотеки для взаимодействия с HTTP-сервисами, причём нередко " +
        "в связке с Retrofit 2, если удалённый сервис, конечно, предоставляет REST-API.\n" +
        "Библиотеки Moshi, GSON, Jackson, Kotlin Serialization. Это библиотеки для серилизации/десерилизации " +
        "данных в различном формате, как правило, в формате JSON. Очень часто используются совместно с " +
        "Retrofit 2, поскольку ответы и запросы REST-API представлены в формате JSON.",
    knowledgeSources = listOf(
        "Retrofit 2: https://square.github.io/retrofit/",
        "OkHTTP: https://square.github.io/okhttp/",
        "Moshi: https://github.com/square/moshi",
        "GSON: https://github.com/google/gson",
        "Jackson: https://github.com/FasterXML/jackson",
        "Kotlin Serialization: https://kotlinlang.org/docs/serialization.html"
    )
)

@JvmField
internal val concurrencyNode = Knowledge(
    name = "Параллелизм и асинхронность",
    description =
        "Крайне важной темой в Android является тема асинхронности. Дело в том, что по-умолчанию " +
        "практически всегда твой код будет выполнятся в главном потоке, который также отвечает за " +
        "отрисовку элементов UI и за взаимодействие с пользователем. Поэтому если ты будешь совершать " +
        "длительные операции в этом потоке, твоё приложение может зависать или же вовсе перестать отвечать" +
        "(ошибка Application Not Responsible или ANR). Во избежании таких ошибок лучше всего " +
        "выполнять такую работу в отдельном потоке или же с использованием библиотек, реализующих " +
        "асинхронность. На данный момент для выполнения таких операций рекомендуется использовать " +
        "одну из двух следующих библиотек.\n\n" +
        "Kotlin Coroutines. Данная библиотека позволяет выполнять длительные операции в так называемых " +
        "корутинах или в приостанавливаемых функциях. Также данная библиотека предоставляет возможность " +
        "выполнять операции в различных потоках, работа которых оптимизирована под выполнение определённых " +
        "задач. Также данная библиотека предоставляет класс Flow, позволяющий наблюдать за изменениями данных " +
        "во внешних источниках асинхронно - с использованием корутин.\n" +
        "RxJava. Альтернатива корутинам Kotlin в случае использования языка Java. Данная библиотека " +
        "реализует концепцию реактивного программирования - подхода, при котором изменения в одних объектах, " +
        "провоцируют изменения в других.",
    knowledgeSources = listOf(
        "Kotlin Coroutines: https://kotlinlang.org/docs/coroutines-guide.html",
        "RxJava 3: https://github.com/ReactiveX/RxJava"
    )
)

@JvmField
internal val testingNode = Knowledge(
    name = "Тестирование",
    description =
        "Тестирование - один из важнейших этапов в разработке программного обеспечения. Под " +
        "тестированием подразумевается, как правило, автоматическое тестирование. Ручное тестирование " +
        "часто является по сути своей отладкой программы.\n" +
        "В Android существует два вида тестов - обычные модульные или юнит-тесты, а также инструментальные " +
        "тесты, которые включают в себя UI-тесты.\n" +
        "Для юнит-тестов в Android-е используется библиотека Junit4.\n" +
        "Для инструментальных тестов также используется Junit. Для UI-тестов используется " +
        "библиотека Espresso.\n",
    knowledgeSources = listOf(
        "Junit в Android: https://developer.android.com/training/testing/local-tests",
        "Espresso: https://developer.android.com/training/testing/espresso"
    )
)
